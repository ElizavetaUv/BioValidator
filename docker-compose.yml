version: "3"
services:
  postgres-db:
    container_name: postgres-db
    env_file:
      - .env-dev
      - .env
    image: postgres:17.2-bookworm
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    networks:
      - backend

  minio:
    container_name: minio
    image: quay.io/minio/minio:RELEASE.2023-11-15T20-43-25Z
    command: ${MINIO_BACKEND} --console-address ":${MINIO_CONSOLE_PORT}" --address ":${MINIO_API_PORT}"
    ports:
      - "${MINIO_CONSOLE_PORT}:${MINIO_CONSOLE_PORT}"
      - "${MINIO_API_PORT}:${MINIO_API_PORT}"
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY}
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:${MINIO_API_PORT}/minio/health/live",
        ]
      interval: 30s
      timeout: 20s
      retries: 3
    volumes:
      - ./s3_emulator:/data
    networks:
      - backend

  api:
    container_name: api
    env_file:
      - .env-dev
      - .env
    build:
      context: .
      dockerfile: backend/Dockerfile.api
    ports:
      - "${API_PORT}:${API_PORT}"
    command: gunicorn -k uvicorn.workers.UvicornWorker -w 4 -b ":${API_PORT}" api.main:app --limit-request-line 0
    depends_on:
      - postgres-db
      - minio
      - migrator
    volumes:
      - ./backend/src:/opt/app/src
      - ./backend/api:/opt/app/api
    networks:
      - backend

  migrator:
    container_name: migrator
    env_file:
      - .env-dev
      - .env
    build:
      context: .
      dockerfile: backend/Dockerfile.api
    command: python -m src.db.initdb
    depends_on:
      - postgres-db
    volumes:
      - ./backend/src:/opt/app/src
      - ./backend/api:/opt/app/api
    networks:
      - backend

networks:
  backend:
    driver: bridge
